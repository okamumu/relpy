
*========availability model for replication domain, Figure 1========*
markov pairup
2U UO   2*gamma
UO 1D d*delta1
UO 2D e*delta2
UO 1N (1-d)*delta1
1N 2D e*delta2
1N UN (1-e)*delta2
UO 2N (1-e)*delta2
2N UN (1-d)*delta1
2N 1D2N d*delta1
1D FS c*phi
1D FN (1-c)*phi
FS UA e*delta2
FS UR (1-e)*delta2
FN UC e*delta2
FN US (1-e)*delta2
2D 1D2D delta1
1D2D UA c*phi
1D2D UC (1-c)*phi
UA UR (1-q)*rou_a
UA 2U q*rou_a
UR 2U r*rou_m
UR UB (1-r)*rou_m
UB 2U beta_m
UC US (1-q)*rou_a
UC 2U q*rou_a
US 2U r*rou_m
US UT (1-r)*rou_m
UT 2U b*beta_m
UT RP (1-b)*beta_m
RP 2U mu
UN MD delta_m
MD 1D2N delta1
1D2N UR c*phi
1D2N US (1-c)*phi
end
  2U 1
end

*========availability model for proxy servers, Figure 8========*
markov pxy_pairup
2U UO   2 * pxy_gamma
UO 1D pxy_d * pxy_delta1
UO 2D pxy_e * pxy_delta2
UO 1N (1-pxy_d)*pxy_delta1
1N 2D pxy_e*pxy_delta2
1N UN (1-pxy_e)*pxy_delta2
UO 2N (1-pxy_e)*pxy_delta2
2N UN (1-pxy_d)*pxy_delta1
2N 1D2N pxy_d*pxy_delta1
1D SO pxy_c * pxy_phi
1D SN (1-pxy_c) * pxy_phi
SO UA pxy_e * pxy_delta2
SO UR (1-pxy_e) * pxy_delta2
SN UC pxy_e * pxy_delta2
SN US (1-pxy_e) * pxy_delta2
2D 1D2D pxy_delta1
1D2D UA pxy_c * pxy_phi
1D2D UC (1-pxy_c) * pxy_phi
UA UR (1-pxy_q) * pxy_rou_a
UA 2U pxy_q * pxy_rou_a
UR 2U pxy_r * pxy_rou_m
UR UB (1-pxy_r) * pxy_rou_m
UB 2U pxy_beta_m
UC US (1-pxy_q) * pxy_rou_a
UC 2U pxy_q * pxy_rou_a
US 2U pxy_r * pxy_rou_m
US UT (1-pxy_r) * pxy_rou_m
UT 2U pxy_b * pxy_beta_m
UT RP (1-pxy_b) * pxy_beta_m
RP 2U pxy_mu
UN MD pxy_delta_m 
MD 1D2N pxy_delta1
1D2N UR	pxy_c * pxy_phi
1D2N US	(1-pxy_c) * pxy_phi
end
  2U 1
end

*========availability model for single appserver, Figure 19========*
markov appserver
UP UO 	gamma
UO UA	e*delta2
UO 1D	d*delta1
UO 1N 	(1-d)*delta1
UO 2N	(1-e)*delta2
1N UA	e*delta2
1N UN	(1-e)*delta2
2N UR	d*delta1
2N UN	(1-d)*delta1
1D UA	e*delta2
1D UR	(1-e)*delta2
UA UR	(1-q)*rou_a
UR UB	(1-r)*rou_m
UB RE	(1-b)*beta_m
UN UR	delta_m
UA UP	q*rou_a
UR UP 	r*rou_m
UB UP	b*beta_m
RE UP	mu
reward
  UP 1
end
end

*========availability model for single proxy server, Figure 19========*
markov proxy
UP UO 	pxy_gamma
UO UA	pxy_e*pxy_delta2
UO 1N 	(1-pxy_d)*pxy_delta1
UO 2N	(1-pxy_e)*pxy_delta2
1N UA	pxy_e*pxy_delta2
1N UN	(1-pxy_e)*pxy_delta2
2N UR	pxy_d*pxy_delta1
2N UN	(1-pxy_d)*pxy_delta1
UA UR	(1-pxy_q)*pxy_rou_a
UR UB	(1-pxy_r)*pxy_rou_m
UB RE	(1-pxy_b)*pxy_beta_m
UO 1D	pxy_d*pxy_delta1
1D UA	pxy_e*pxy_delta2
1D UR	(1-pxy_e)*pxy_delta2
UN UR	pxy_delta_m
UA UP	pxy_q*pxy_rou_a
UR UP 	pxy_r*pxy_rou_m
UB UP	pxy_b*pxy_beta_m
RE UP	pxy_mu
reward
  UP 1
end
end


*=====================availability models for hardware=============================
*=======Figure 13==========*
markov midplane
UP DN 	c_mp*lambda_mp
UP U1 	(1-c_mp)*lambda_mp
U1 RP 	alpha_sp
RP UP	mu_mp
DN RP	alpha_sp
reward
  UP 1
  U1 1  		
end
end

*=======Figure 14==========*
markov cooling
UP U1 	2*lambda_c
U1 RP 	alpha_sp
U1 DN	lambda_c
DN DW	alpha_sp
RP UP	mu_c
RP DW	lambda_c
DW UP	mu_2c
reward
  UP 1
  U1 1
  RP 1
end
end

*=======Figure 15==========*
markov power
UP U1 	2*c_ps*lambda_ps
UP DN	2*(1-c_ps)*lambda_ps
U1 RP 	alpha_sp
U1 DN	lambda_ps
DN DW	alpha_sp
RP UP	mu_ps
RP DW	lambda_ps
DW UP	mu_2ps
reward
  UP 1
  U1 1
  RP 1
end
end

*=======Figure 16==========*
markov processor
UP D1 	2*lambda_cpu
D1 RP	alpha_sp
RP UP	mu_cpu
reward
  UP 1
end
end

*=======Figure 17==========*
markov memory
UP D1 	4*lambda_mem
D1 RP	alpha_sp
RP UP	mu_mem
reward
  UP 1
end
end

*=======Figure 18==========*
markov disk
UP U1	2*lambda_hd
U1 RP	alpha_sp
RP CP	mu_hd
CP DW	lambda_hd
U1 DN	lambda_hd
DN DW	alpha_sp
CP UP 	chi_hd
DW UP	mu_2hd
reward
  UP 1
  U1 1
  CP 1
end
end

*=======Figure 20==========*
markov base
UP DN lambda_base
DN RP alpha_sp
RP UP mu_base
reward 
  UP 1
end
end

*=======Figure 21==========*
markov OS
UP DN lambda_os
DN DT delta_os
DT UP b_os*beta_os
DT DW (1-b_os)*beta_os
DW RP alpha_sp
RP UP mu_os
reward 
  UP 1
end
end

*=======Figure 20==========*
markov nic
UP DN lambda_nic
DN RP alpha_sp
RP UP mu_nic
reward 
  UP 1
end
end

*=======Figure 20==========*
markov switch
UP DN lambda_esw
DN RP alpha_sp
RP UP mu_esw
reward 
  UP 1
end
end

bind	
	f_esw 		prob(switch, UP)*lambda_esw
	f_nic 		prob(nic, UP)*lambda_nic
	u_esw 		f_esw/(1-exrss(switch))
	u_nic 		f_nic/(1-exrss(nic))
end	
*=======Figure 22==========*
ftree network
repeat nic1 	exp(lambda_nic)
repeat nic2 	exp(lambda_nic)
repeat esw1		exp(lambda_esw)
repeat esw2		exp(lambda_esw)
or eth1 nic1 esw1
or eth2 nic2 esw2
and top eth1 eth2
end

*=======Figure 11==========*
ftree CM
repeat MP prob(1-exrss(midplane))
repeat Cool prob(1-exrss(cooling))
repeat Pwr  prob(1-exrss(power))
or top MP Cool Pwr
end

*=======part of Figure 12==========*
ftree BLADE
repeat Base prob(1-exrss(base))
repeat CPU prob(1-exrss(processor))
repeat Mem prob(1-exrss(memory))
repeat RAID prob(1-exrss(disk))
repeat OS prob(1-exrss(OS))
or top Base CPU Mem RAID OS
end
*=========================================


*========system availability model=========*
*=======Figure 10==========*
ftree CLUSTER
repeat CM1  prob(sysprob(CM))
repeat CM2  prob(sysprob(CM))
repeat esw1 prob(1-exrss(switch))
repeat esw2 prob(1-exrss(switch))
repeat esw3 prob(1-exrss(switch))
repeat esw4 prob(1-exrss(switch))
basic SW prob(1-exrss(appserver))
basic SWP prob(1-exrss(proxy))

	*===========Blade Servers===========*
repeat Node_A prob(sysprob(BLADE))
repeat nic1_A prob(1-exrss(nic))
repeat nic2_A prob(1-exrss(nic))
or eth1_A nic1_A esw1
or eth2_A nic2_A esw2
and eth_A eth1_A eth2_A
or BS_A Node_A eth_A

repeat Node_B prob(sysprob(BLADE))
repeat nic1_B prob(1-exrss(nic))
repeat nic2_B prob(1-exrss(nic))
or eth1_B nic1_B esw1
or eth2_B nic2_B esw2
and eth_B eth1_B eth2_B
or BS_B Node_B eth_B

repeat Node_C prob(sysprob(BLADE))
repeat nic1_C prob(1-exrss(nic))
repeat nic2_C prob(1-exrss(nic))
or eth1_C nic1_C esw1
or eth2_C nic2_C esw2
and eth_C eth1_C eth2_C
or BS_C Node_C eth_C

repeat Node_D prob(sysprob(BLADE))
repeat nic1_D prob(1-exrss(nic))
repeat nic2_D prob(1-exrss(nic))
or eth1_D nic1_D esw3
or eth2_D nic2_D esw4
and eth_D eth1_D eth2_D
or BS_D Node_D eth_D

repeat Node_E prob(sysprob(BLADE))
repeat nic1_E prob(1-exrss(nic))
repeat nic2_E prob(1-exrss(nic))
or eth1_E nic1_E esw3
or eth2_E nic2_E esw4
and eth_E eth1_E eth2_E
or BS_E Node_E eth_E

repeat Node_F prob(sysprob(BLADE))
repeat nic1_F prob(1-exrss(nic))
repeat nic2_F prob(1-exrss(nic))
or eth1_F nic1_F esw3
or eth2_F nic2_F esw4
and eth_F eth1_F eth2_F
or BS_F Node_F eth_F

repeat Node_G prob(sysprob(BLADE))
repeat nic1_G prob(1-exrss(nic))
repeat nic2_G prob(1-exrss(nic))
or eth1_G nic1_G esw1
or eth2_G nic2_G esw2
and eth_G eth1_G eth2_G
or BS_G Node_G eth_G

repeat Node_H prob(sysprob(BLADE))
repeat nic1_H prob(1-exrss(nic))
repeat nic2_H prob(1-exrss(nic))
or eth1_H nic1_H esw3
or eth2_H nic2_H esw4
and eth_H eth1_H eth2_H
or BS_H Node_H eth_H

	*===========Application Servers===========*
or AS1 SW BS_A CM1
or AS2 SW BS_A CM1
or AS3 SW BS_B CM1
or AS4 SW BS_B CM1
or AS5 SW BS_C CM1
or AS6 SW BS_C CM1
or AS7 SW BS_D CM2
or AS8 SW BS_D CM2
or AS9 SW BS_E CM2
or AS10 SW BS_E CM2
or AS11 SW BS_F CM2
or AS12 SW BS_F CM2
kofn apps 6, 12, AS1 AS2 AS3 AS4 AS5 AS6 AS7 AS8 AS9 AS10 AS11 AS12

	*===========Proxy Servers===========*
or PX1 SWP BS_G CM1
or PX2 SWP BS_H CM2
and pxys PX1 PX2

or top apps pxys
end

